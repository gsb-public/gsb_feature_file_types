<?php
/**
 * @file
 * Code for the gsb_feature_file_types feature.
 */

include_once 'gsb_feature_file_types.features.inc';

/**
 * Implements hook_menu().
 */
function gsb_feature_file_types_menu() {
  $items = array();
  $items['text-equivalent/%file'] = array(
    'description' => 'View Text Equivalent.',
    'page callback' => 'gsb_feature_file_types_view_text_equivalent',
    'page arguments' => array(1),
    'access arguments' => array('access content'),
  );
  return $items;
}


function gsb_feature_file_types_view_text_equivalent($file) {
  module_load_include('php', 'markdown', 'markdown');
  // add CSS
  drupal_add_css(drupal_get_path('theme', 'gsb_theme') . '/css/style.css');
  return Markdown($file->field_text_equivalent['und'][0]['value']);
}

/**
 * Implements hook_custom_theme()
 */
function gsb_feature_file_types_custom_theme() {
  // set the theme to starl
  $args = explode('/', current_path());
  if ($args[0] == 'text-equivalent') {
    return 'stark';
  }
}

/**
 * Implements hook_page_alter()
 */
function gsb_feature_file_types_page_alter(&$page) {
  // hide all the region except content for clean html
  $args = explode('/', current_path());
  if ($args[0] == 'text-equivalent') {
    foreach (element_children($page) as $region) {
      if ($region != 'content') {
        unset($page[$region]);
      }
    }
  }
}

/**
 * Implements hook_ds_pre_render_alter()
 * Alter the output generated to add a call-quotes class if
 *   it is a resource_pull_quote and field_quote_author has a value
 */
function gsb_feature_file_types_ds_pre_render_alter(&$layout_render_array, $context, &$vars) {
  if (!empty($layout_render_array['ds_content'])) {
    $found_resource_pull_quote = FALSE;
    foreach ($layout_render_array['ds_content'] as $content) {
      if (!empty($content['#bundle']) && $content['#bundle'] == 'resource_pull_quote') {
        $found_resource_pull_quote = TRUE;
      }
    }
    if ($found_resource_pull_quote) {
      if (!empty($vars['field_quote_author'])) {
        if (!empty($vars['field_quote_author'][0]['value'])) {
          $vars['classes_array'][] = 'callout-quote';
        }
      }
    }
  }
}

/**
 * Implements hook_media_token_to_markup_alter()
 * Alter the output generated by Media filter tags.
 */
function gsb_feature_file_types_media_token_to_markup_alter(&$element, $tag_info, $settings) {
  $alignment = '';
  if (isset($element['content']) && $element['content']['#bundle'] == 'image') {
    $file = $element['content']['file']['#file'];
    if (isset($file->field_file_image_alignment['und'])) {
      $alignment = $file->field_file_image_alignment['und'];
    }
    $style = '';
    if (isset($file->field_file_image_show_caption['und']) && $file->field_file_image_show_caption['und'] == 1 && !is_array($file->field_file_image_show_caption['und'])) {
      $show_caption = TRUE;
    }
    else {
      $show_caption = FALSE;
    }
    if ($show_caption) {
      if (!empty($element['content']['file']['#title'])) {
        $title = $element['content']['file']['#title'];        
        if (!empty($title)) {
          $element['content']['text'] = array('#markup' => '<div class="caption-text">' . $title . '</div>');
        }
      }
      if (!empty($element['content']['file']['#width'])) {
        $width = $element['content']['file']['#width'];
        if ($width) {
          $style = ' style="width:' . $width . 'px;"';
        }
      }
    }
    $element['#prefix'] = '<div class="' . $alignment .'"' . $style . '>';
    $element['#suffix'] = '</div>';
  }
}

/**
 * Implements hook_form_alter() for reource image form.
 */
function gsb_feature_file_types_form_alter(&$form, &$form_state, $form_id){
  if ($form_id == 'resources_add_form'){
    $form['upload']['#description'] = t('Note: making all resource images this size will ensure you can move it from third > half > full without having to resize the image.
          <ul><li>Full: 1630 x 350 px (recommended height)</li><li>1/2: 815 px wide (variable height)</li><li>1/3: 540 px wide (variable height)</li>');
  }
}
